openapi: 3.0.0
info:
  title: Users-Service
  description: API for managing tenants, users, and applications
  version: 0.1.0
  contact:
    name: Anson Allard

# servers:
#   - url: /v1

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    OAuth2TokenResponse:
      type: object
      additionalProperties: false
      properties:
        access_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        token_type:
          type: string
          enum:
          - Bearer
        expires_in:
          type: number
          example: 300
        refresh_token:
          type: string
          example: asdgniadin23jfaosdfnsoafnalskdnfo2n3afifnk23jnawe
        scope:
          type: string
      required:
        - access_token
        - token_type
        - expires_in


    OAuth2TokenRequest:
      type: object
      properties:
        grant_type:
          type: string
          enum:
          - authorization_code
          - password
          - refresh_token
          - client_credentials
        code:
          type: string
        scope:
          type: string
          nullable: true
        refresh_token:
          type: string
          nullable: true
      required:
        - grant_type
    OAuth2ErrorSchema:
      type: object
      properties:
        error:
          type: string
          enum:
            - invalid_request
            - invalid_client
            - invalid_grant
            - unauthorized_client
            - unsupported_grant_type
            - invalid_scope
        error_description:
          type: string
        error_uri:
          type: string
      required:
      - error

    OAuth2AuthorizationRequest:
      type: object
      additionalProperties: false
      properties:
        response_type:
          type: string
          enum:
          - code
        scope:
          type: string
        client_id:
          type: string
        redirect_uri:
          type: string
          format: uri
      required:
        - response_type
        - client_id
      
    CreateTenantResponse:
      type: object
      properties:
        tenantId:
          type: string
          format: ulid
        createdAt:
          type: string
          format: date-time
        version:
          type: string

    CreateUserRequest:
      type: object
      properties:
        password:
          type: string
      required:
        - password

    ResetPasswordRequest:
      type: object
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
      required:
        - oldPassword
        - newPassword

    CreateApplicationRequest:
      type: object
      properties:
        name:
          type: string
        users:
          type: array
          items:
            type: string
      required:
        - name
        - users

    CreateApplicationResponse:
      type: object
      properties:
        clientId:
          type: string

    ListApplicationUsersResponse:
      type: object
      properties:
        usernames:
          type: array
          items:
            type: string
        nextToken:
          type: string

    UserLoginResponse:
      type: object
      additionalProperties: false
      properties:
        redirectUrl:
          type: string
      required:
        - redirectUrl 

    UserLoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        redirectUri:
          type: string
      required:
        - username
        - password
      additionalProperties: false

  responses:
    OAuthErrorBadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OAuth2ErrorSchema"
    
    UnauthorizedError:
      description: Authentication information is missing or invalid
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string

    ForbiddenError:
      description: Not authorized to perform the operation
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string

    NotFoundError:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string

    InternalServerError:
      description: Internal server error occurred
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string

    ConflictError:
      description: The request conflicts with the current state of the resource
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string

    BadRequestError:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string

# security:
#   - bearerAuth: []

paths:

  /login:
    get:
      operationId: LoginPage
      responses:
        '200':
          description: Ok
          content:
            "text/html":
              schema:
                type: object

  /oauth/token:
    options:
      operationId: OAuth2TokenOptions
      responses:
        '200':
          description: Ok
          headers:
            "Access-Control-Allow-Origin":
              schema:
                type: string
            "Access-Control-Allow-Headers":
              schema:
                type: string
    post:
      operationId: OAuth2Token
      tags:
        - Access Control
      description: OAuth2 Token Implementation
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/OAuth2TokenRequest"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OAuth2TokenResponse"
        '400':
          $ref: "#/components/responses/OAuthErrorBadRequest"
        '401':
          $ref: "#/components/responses/OAuthErrorBadRequest"

  
  /oauth/authorize:
    get:
      operationId: OAuth2Authorize
      tags:
      - Access Control
      description: OAuth2 Authorization Implementation
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/OAuth2AuthorizationRequest"
      responses:
        '302':
          description: Success
          headers:
            Location:
              description: Client requesting authorization code
              schema:
                type: string
                format: uri
        '400':
          $ref: "#/components/responses/OAuthErrorBadRequest"
        '401':
          $ref: "#/components/responses/OAuthErrorBadRequest"


  /tenants:
    post:
      operationId: createTenant
      summary: Create a new tenant
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful tenant creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTenantResponse'
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /tenants/{id}/login:
    post:
      tags:
        - Access Control
      operationId: login
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLoginRequest"
      responses:
        '200':
          description: Login response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserLoginResponse"
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '5XX':
          $ref: "#/components/responses/InternalServerError"

  /tenants/{id}/users/{username}:
    put:
      operationId: createOrUpdateUser
      summary: Create or update a user
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: username
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '204':
          description: User created or updated successfully
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/ConflictError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /tenants/{id}/users/{username}/resetPassword:
    post:
      operationId: resetUserPassword
      summary: Reset user password
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: username
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '204':
          description: No Content
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /tenants/{id}/applications:
    post:
      operationId: createApplication
      summary: Create a new application
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApplicationRequest'
      responses:
        '200':
          description: Application created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateApplicationResponse'
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /tenants/{id}/applications/{applicationId}/users:
    get:
      operationId: listApplicationUsers
      summary: List application users
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: applicationId
          in: path
          required: true
          schema:
            type: string
        - name: nextToken
          in: query
          required: false
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          schema:
            type: integer
            maximum: 1000
      responses:
        '200':
          description: Successfully retrieved users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListApplicationUsersResponse'
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /tenants/{id}/applications/{applicationId}/users/{username}:
    put:
      operationId: addUserToApplication
      summary: Add user to application
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: applicationId
          in: path
          required: true
          schema:
            type: string
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User successfully added to application
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'