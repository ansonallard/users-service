// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for OAuth2ErrorSchemaError.
const (
	InvalidClient        OAuth2ErrorSchemaError = "invalid_client"
	InvalidGrant         OAuth2ErrorSchemaError = "invalid_grant"
	InvalidRequest       OAuth2ErrorSchemaError = "invalid_request"
	InvalidScope         OAuth2ErrorSchemaError = "invalid_scope"
	UnauthorizedClient   OAuth2ErrorSchemaError = "unauthorized_client"
	UnsupportedGrantType OAuth2ErrorSchemaError = "unsupported_grant_type"
)

// Defines values for OAuth2TokenRequestGrantType.
const (
	AuthorizationCode OAuth2TokenRequestGrantType = "authorization_code"
	ClientCredentials OAuth2TokenRequestGrantType = "client_credentials"
	Password          OAuth2TokenRequestGrantType = "password"
	RefreshToken      OAuth2TokenRequestGrantType = "refresh_token"
)

// Defines values for OAuth2TokenResponseTokenType.
const (
	Bearer OAuth2TokenResponseTokenType = "bearer"
)

// CreateUserRequestDto defines model for CreateUserRequestDto.
type CreateUserRequestDto struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Token  string `json:"token"`
	UserId string `json:"userId"`
}

// OAuth2ErrorSchema defines model for OAuth2ErrorSchema.
type OAuth2ErrorSchema struct {
	Error            OAuth2ErrorSchemaError `json:"error"`
	ErrorDescription *string                `json:"error_description,omitempty"`
	ErrorUri         *string                `json:"error_uri,omitempty"`
}

// OAuth2ErrorSchemaError defines model for OAuth2ErrorSchema.Error.
type OAuth2ErrorSchemaError string

// OAuth2TokenRequest defines model for OAuth2TokenRequest.
type OAuth2TokenRequest struct {
	GrantType    OAuth2TokenRequestGrantType `json:"grant_type"`
	RefreshToken *string                     `json:"refresh_token"`
	Scope        *string                     `json:"scope"`
}

// OAuth2TokenRequestGrantType defines model for OAuth2TokenRequest.GrantType.
type OAuth2TokenRequestGrantType string

// OAuth2TokenResponse defines model for OAuth2TokenResponse.
type OAuth2TokenResponse struct {
	AccessToken  string                       `json:"access_token"`
	ExpiresIn    float32                      `json:"expires_in"`
	RefreshToken *string                      `json:"refresh_token,omitempty"`
	Scope        *string                      `json:"scope,omitempty"`
	TokenType    OAuth2TokenResponseTokenType `json:"token_type"`
}

// OAuth2TokenResponseTokenType defines model for OAuth2TokenResponse.TokenType.
type OAuth2TokenResponseTokenType string

// ResetUserPasswordDto defines model for ResetUserPasswordDto.
type ResetUserPasswordDto struct {
	NewPassword string `json:"newPassword"`
	OldPassword string `json:"oldPassword"`
	Username    string `json:"username"`
}

// BadRequest defines model for BadRequest.
type BadRequest struct {
	Message *string `json:"message,omitempty"`
}

// Conflict defines model for Conflict.
type Conflict struct {
	Message *string `json:"message,omitempty"`
}

// CreateUserResponseDto User created
type CreateUserResponseDto struct {
	Id string `json:"id"`
}

// Forbidden defines model for Forbidden.
type Forbidden struct {
	Message *string `json:"message,omitempty"`
}

// InternalServerError defines model for InternalServerError.
type InternalServerError struct {
	Message *string `json:"message,omitempty"`
}

// OAuthErrorBadRequest defines model for OAuthErrorBadRequest.
type OAuthErrorBadRequest = OAuth2ErrorSchema

// UnAuthorized defines model for UnAuthorized.
type UnAuthorized struct {
	Message *string `json:"message,omitempty"`
}

// OAuth2TokenFormdataRequestBody defines body for OAuth2Token for application/x-www-form-urlencoded ContentType.
type OAuth2TokenFormdataRequestBody = OAuth2TokenRequest

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = CreateUserRequestDto

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = CreateUserRequestDto

// ResetPasswordJSONRequestBody defines body for ResetPassword for application/json ContentType.
type ResetPasswordJSONRequestBody = ResetUserPasswordDto

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYX3PiNhD/Kh713mrAgSTT8JZLLhmTI3+AXNK7SRlhr0FgS64kB0jG370jyYANTiCZ",
	"u6YPfbPl3dVvd3+7WvkZeSyKGQUqBWo+Iw4iZlSAfvmM/Q78nYCQ6s1jVALVjziOQ+JhSRitjQWjak14",
	"I4iweoo5i4FLYoxEIAQegnqU8xhQEwnJCR2iNLUXK2wwBk+iVC35IDxOYmUbNRUEi2cYUhudMBqExPs4",
	"PB0QLOEeWN4CiULFAUu4FcA7WfhOJXsTROz7RH3C4XUObIBDAesI1DaWp3f0kb3mHPHL/VIhJBx81Pyh",
	"ZB528FQ5dsb4gPg+0A+L9wpBaiOXSuAUh13gj8C/cM74hwFbYLEMGMugSW10dZzIkX57Z/l84hCgJvqt",
	"tqrMmvkqatp4XVvvGoXtNXNLlRLj5An8DwvXJZNWDoYSyHxSBvMFpHFn9fNqWRThxViIKePaw4jQr0CH",
	"coSaf9jraG2UCJW5CIyaVHlETfTXD1x5Oq58dypHD79/QvaWKloasVdbb5aVjb6yIaGLtvBGnySbmNIr",
	"dcHdodYzOTszVQZwk1IbqYdFpQFNIt1C6CMOid9fsMxernghUdxaLQw51u8Jxcv0r6QSKpI4ZlxCJtnX",
	"+FbqwmMx5HCvQqBB9Qsse35JKuFke6yMly+HqKdCmCvoYoxy6HOBWvisS6zvMb/AF7V/wEGM+iY9NjKB",
	"6XscfKCS4FCU+l5Uaz4jmoQhHoSAmpInUKJh4rhdci0mOa+2BuZdFMeeB0KsHIEZjmKFDsG8NRqce+SK",
	"tNzbJ3fvkrjCpZ0D78Q9dCfx/beT1lEV5q0n/84lV8Sdtcdt57L3Z+PqdDJ1yZQMojP5vauFH/H5/rBz",
	"fhSqdXx35rhjNrvsfam3x+2D9qk7D26q3SC8mE07rW4bLi7O6je9/WAat6EVNA6vryaH89a3PvZvhJge",
	"eKiMjrOYcBB9UnSj4ThLYZpEA+Cl+Vu5jYU/pAT7hNYb4wAz4QdUMBxQHIqJTwNWpw0ckIBO6o0xxVNA",
	"r2V744vecYOmA8AceAnV1uhQyFbBWCEAZVTpgACpOvx1xv63t3gK0+vduzwL/euPOxPyu9sF5CWzl40E",
	"eAkncq47cDZ865z0FgwxKTpjPMISNVHrroeyI1SZyhK4ND2SMjbHMKGBjrMkUvNLYRQVAfyReAroI3Bh",
	"jminuld1dORioDgmqIkaVafq6I4lRxpUjamOVlvyNmamFxYPe9MWLI3dchWxI6BS90CkzXP9rA6wfAtB",
	"Jpog5Gfmz18ZVWaV6XRaCRiPKgkPgaq+6r91iCq08zQ1ucxdfuqO85PHtmKfLBmSuomuL5WDfbN7mdEl",
	"ylrpqKmV996rrFoEHgrF5mMNxjphVHIWogf1rabp83LmzSBnYUvJWRnB11O+mvZ2zvjbwl06TqbFalWn",
	"32bKd4hb+WVv15S9I1GF+V0rNbYrFe5N+87RDn7lLrQH9/fbFcpuY7vxpxaqofhlFumZ2SLUUjOQnFsV",
	"i4NMOBXW4uQpEkrL/+e49PPaR/EOUdI4TMD4UuLfI+OvZgpXY0P+HC9njJ4urMVgbQWMmw60jTmdgvlf",
	"w6DSyed/Bi3/A7zMgjT9JwAA//9RnwevnxQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
